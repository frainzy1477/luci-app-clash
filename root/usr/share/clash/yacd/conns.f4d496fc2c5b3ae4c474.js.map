{"version":3,"sources":["webpack://yacd/./src/components/Connections.module.css?4ee8","webpack://yacd/./src/components/ConnectionTable.module.css?30be","webpack://yacd/./src/components/ConnectionTable.tsx","webpack://yacd/./src/components/ModalCloseAllConnections.module.css?1a35","webpack://yacd/./src/components/ModalCloseAllConnections.tsx","webpack://yacd/./src/components/Connections.tsx","webpack://yacd/./src/components/shared/Fab.module.css?1ffc","webpack://yacd/./src/components/shared/Fab.tsx","webpack://yacd/./src/hooks/useRemainingViewPortHeight.ts"],"names":["sortDescFirst","columns","accessor","show","Header","renderCell","cell","column","id","formatDistance","value","prettyBytes","tableState","sortBy","desc","hiddenColumns","data","useTable","initialState","autoResetSortBy","useSortBy","getTableProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","className","s","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","size","row","i","cells","j","getCellProps","cx","useRef","React","useCallback","useMemo","Comp","isOpen","onRequestClose","primaryButtonOnTap","primaryButtonRef","onAfterOpen","current","focus","base","modalStyle","afterOpen","beforeClose","overlayClassName","Button","onClick","ref","style","width","useEffect","useState","filterConns","conns","keyword","filter","conn","host","sourceIP","sourcePort","destinationIP","chains","rule","type","network","some","field","pat","toLowerCase","includes","renderTableOrPlaceholder","length","ConnectionTable","SvgYacd","height","c1","ConnQty","qty","connect","apiConfig","getClashAPIConfig","useRemainingViewPortHeight","refContainer","containerHeight","setConns","closedConns","setClosedConns","filterKeyword","setFilterKeyword","filteredConns","filteredClosedConns","isCloseAllModalOpen","setIsCloseAllModalOpen","openCloseAllModal","closeCloseAllModal","isRefreshPaused","setIsRefreshPaused","toggleIsRefreshPaused","x","closeAllConnections","connAPI","prevConnsRef","read","connections","prevConnsKv","items","o","item","arrayToIdKv","now","Date","c","prevKv","metadata","upload","download","start","destinationPort","host2","prev","valueOf","reverse","join","source","downloadSpeedCurr","uploadSpeedCurr","formatConnectionDataItem","closed","findIndex","push","slice","t","useTranslation","ContentHeader","title","display","flexWrap","justifyContent","name","autoComplete","placeholder","onChange","e","target","padding","paddingBottom","paddingTop","overflow","Fab","icon","mainButtonStyles","background","fabPosition","text","IsFetching","children","position","right","bottom","useLayoutEffect","setContainerHeight","updateContainerHeight","top","getBoundingClientRect","window","innerHeight","addEventListener","removeEventListener"],"mappings":"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","file":"conns.f4d496fc2c5b3ae4c474.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"placeHolder\":\"_1L_OYNGd-Q\",\"connQty\":\"_3KG2Wl3UIL\",\"inputWrapper\":\"_2VBzsdXyrW\",\"input\":\"_3jbpkYalBS\"};","// extracted by mini-css-extract-plugin\nexport default {\"tr\":\"_1jfIf4GmHx\",\"th\":\"_3lQG38TYko\",\"td\":\"_2jKsqjrYbo\",\"odd\":\"MuvmFG__PV\",\"du\":\"_3ydhc_nkf0\",\"sortIconContainer\":\"_3q0v0OLzZL\",\"rotate180\":\"_1XNg9MalRS\"};","import cx from 'clsx';\nimport { formatDistance } from 'date-fns';\nimport React from 'react';\nimport { ChevronDown } from 'react-feather';\nimport { useSortBy, useTable } from 'react-table';\n\nimport prettyBytes from '../misc/pretty-bytes';\nimport s from './ConnectionTable.module.css';\n\nconst sortDescFirst = true;\n\nconst columns = [\n  { accessor: 'id', show: false },\n  { Header: 'Host', accessor: 'host' },\n  { Header: 'DL', accessor: 'download', sortDescFirst },\n  { Header: 'UL', accessor: 'upload', sortDescFirst },\n  { Header: 'DL Speed', accessor: 'downloadSpeedCurr', sortDescFirst },\n  { Header: 'UL Speed', accessor: 'uploadSpeedCurr', sortDescFirst },\n  { Header: 'Chains', accessor: 'chains' },\n  { Header: 'Rule', accessor: 'rule' },\n  { Header: 'Time', accessor: 'start', sortDescFirst },\n  { Header: 'Source', accessor: 'source' },\n  { Header: 'Destination IP', accessor: 'destinationIP' },\n  { Header: 'Type', accessor: 'type' },\n];\n\nfunction renderCell(cell: { column: { id: string }; value: number }) {\n  switch (cell.column.id) {\n    case 'start':\n      return formatDistance(cell.value, 0);\n    case 'download':\n    case 'upload':\n      return prettyBytes(cell.value);\n    case 'downloadSpeedCurr':\n    case 'uploadSpeedCurr':\n      return prettyBytes(cell.value) + '/s';\n    default:\n      return cell.value;\n  }\n}\n\nconst sortById = { id: 'id', desc: true };\nconst tableState = {\n  sortBy: [\n    // maintain a more stable order\n    sortById,\n  ],\n  hiddenColumns: ['id'],\n};\n\nfunction Table({ data }) {\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns,\n      data,\n      initialState: tableState,\n      autoResetSortBy: false,\n    },\n    useSortBy\n  );\n  return (\n    <div {...getTableProps()}>\n      {headerGroups.map((headerGroup) => {\n        return (\n          <div {...headerGroup.getHeaderGroupProps()} className={s.tr}>\n            {headerGroup.headers.map((column) => (\n              <div\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                className={s.th}\n              >\n                <span>{column.render('Header')}</span>\n                <span className={s.sortIconContainer}>\n                  {column.isSorted ? (\n                    <span className={column.isSortedDesc ? '' : s.rotate180}>\n                      <ChevronDown size={16} />\n                    </span>\n                  ) : null}\n                </span>\n              </div>\n            ))}\n\n            {rows.map((row, i) => {\n              prepareRow(row);\n              return row.cells.map((cell, j) => {\n                return (\n                  <div\n                    {...cell.getCellProps()}\n                    className={cx(\n                      s.td,\n                      i % 2 === 0 ? s.odd : false,\n                      j >= 1 && j <= 4 ? s.du : false\n                    )}\n                  >\n                    {renderCell(cell)}\n                  </div>\n                );\n              });\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Table;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"_2EXTX1C3T7\",\"cnt\":\"_3Or8nP9psK\",\"afterOpen\":\"cMLUu0qS4R\",\"btngrp\":\"_29FK6hdfwZ\"};","import cx from 'clsx';\nimport React from 'react';\nimport Modal from 'react-modal';\n\nimport Button from './Button';\nimport modalStyle from './Modal.module.css';\nimport s from './ModalCloseAllConnections.module.css';\n\nconst { useRef, useCallback, useMemo } = React;\n\nexport default function Comp({ isOpen, onRequestClose, primaryButtonOnTap }) {\n  const primaryButtonRef = useRef(null);\n  const onAfterOpen = useCallback(() => {\n    primaryButtonRef.current.focus();\n  }, []);\n  const className = useMemo(\n    () => ({\n      base: cx(modalStyle.content, s.cnt),\n      afterOpen: s.afterOpen,\n      beforeClose: '',\n    }),\n    []\n  );\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      onAfterOpen={onAfterOpen}\n      className={className}\n      overlayClassName={cx(modalStyle.overlay, s.overlay)}\n    >\n      <p>Are you sure you want to close all connections?</p>\n      <div className={s.btngrp}>\n        <Button onClick={primaryButtonOnTap} ref={primaryButtonRef}>\n          I'm sure\n        </Button>\n        {/* im lazy :) */}\n        <div style={{ width: 20 }} />\n        <Button onClick={onRequestClose}>No</Button>\n      </div>\n    </Modal>\n  );\n}\n","import './Connections.css';\n\nimport React from 'react';\nimport { Pause, Play, X as IconClose } from 'react-feather';\nimport { useTranslation } from 'react-i18next';\nimport { Tab, TabList, TabPanel, Tabs } from 'react-tabs';\nimport { ConnectionItem } from 'src/api/connections';\nimport { State } from 'src/store/types';\n\nimport * as connAPI from '../api/connections';\nimport useRemainingViewPortHeight from '../hooks/useRemainingViewPortHeight';\nimport { getClashAPIConfig } from '../store/app';\nimport s from './Connections.module.css';\nimport ConnectionTable from './ConnectionTable';\nimport ContentHeader from './ContentHeader';\nimport ModalCloseAllConnections from './ModalCloseAllConnections';\nimport { Action, Fab, position as fabPosition } from './shared/Fab';\nimport { connect } from './StateProvider';\nimport SvgYacd from './SvgYacd';\n\nconst { useEffect, useState, useRef, useCallback } = React;\n\nconst paddingBottom = 30;\n\nfunction arrayToIdKv<T extends { id: string }>(items: T[]) {\n  const o = {};\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    o[item.id] = item;\n  }\n  return o;\n}\n\ntype FormattedConn = {\n  id: string;\n  upload: number;\n  download: number;\n  start: number;\n  chains: string;\n  rule: string;\n  destinationPort: string;\n  destinationIP: string;\n  sourceIP: string;\n  sourcePort: string;\n  source: string;\n  host: string;\n  type: string;\n  network: string;\n  downloadSpeedCurr?: number;\n  uploadSpeedCurr?: number;\n};\n\nfunction hasSubstring(s: string, pat: string) {\n  return s.toLowerCase().includes(pat.toLowerCase());\n}\n\nfunction filterConns(conns: FormattedConn[], keyword: string) {\n  return !keyword\n    ? conns\n    : conns.filter((conn) =>\n        [\n          conn.host,\n          conn.sourceIP,\n          conn.sourcePort,\n          conn.destinationIP,\n          conn.chains,\n          conn.rule,\n          conn.type,\n          conn.network,\n        ].some((field) => hasSubstring(field, keyword))\n      );\n}\n\nfunction formatConnectionDataItem(\n  i: ConnectionItem,\n  prevKv: Record<string, { upload: number; download: number }>,\n  now: number\n): FormattedConn {\n  const { id, metadata, upload, download, start, chains, rule } = i;\n  const {\n    host,\n    destinationPort,\n    destinationIP,\n    network,\n    type,\n    sourceIP,\n    sourcePort,\n  } = metadata;\n  // host could be an empty string if it's direct IP connection\n  let host2 = host;\n  if (host2 === '') host2 = destinationIP;\n  const prev = prevKv[id];\n  const ret = {\n    id,\n    upload,\n    download,\n    start: now - new Date(start).valueOf(),\n    chains: chains.reverse().join(' / '),\n    rule,\n    ...metadata,\n    host: `${host2}:${destinationPort}`,\n    type: `${type}(${network})`,\n    source: `${sourceIP}:${sourcePort}`,\n    downloadSpeedCurr: download - (prev ? prev.download : 0),\n    uploadSpeedCurr: upload - (prev ? prev.upload : 0),\n  };\n  return ret;\n}\n\nfunction renderTableOrPlaceholder(conns: FormattedConn[]) {\n  return conns.length > 0 ? (\n    <ConnectionTable data={conns} />\n  ) : (\n    <div className={s.placeHolder}>\n      <SvgYacd width={200} height={200} c1=\"var(--color-text)\" />\n    </div>\n  );\n}\n\nfunction ConnQty({ qty }) {\n  return qty < 100 ? '' + qty : '99+';\n}\n\nfunction Conn({ apiConfig }) {\n  const [refContainer, containerHeight] = useRemainingViewPortHeight();\n  const [conns, setConns] = useState([]);\n  const [closedConns, setClosedConns] = useState([]);\n  const [filterKeyword, setFilterKeyword] = useState('');\n  const filteredConns = filterConns(conns, filterKeyword);\n  const filteredClosedConns = filterConns(closedConns, filterKeyword);\n  const [isCloseAllModalOpen, setIsCloseAllModalOpen] = useState(false);\n  const openCloseAllModal = useCallback(() => setIsCloseAllModalOpen(true), []);\n  const closeCloseAllModal = useCallback(\n    () => setIsCloseAllModalOpen(false),\n    []\n  );\n  const [isRefreshPaused, setIsRefreshPaused] = useState(false);\n  const toggleIsRefreshPaused = useCallback(() => {\n    setIsRefreshPaused((x) => !x);\n  }, []);\n  const closeAllConnections = useCallback(() => {\n    connAPI.closeAllConnections(apiConfig);\n    closeCloseAllModal();\n  }, [apiConfig, closeCloseAllModal]);\n  const prevConnsRef = useRef(conns);\n  const read = useCallback(\n    ({ connections }) => {\n      const prevConnsKv = arrayToIdKv(prevConnsRef.current);\n      const now = Date.now();\n      const x = connections.map((c: ConnectionItem) =>\n        formatConnectionDataItem(c, prevConnsKv, now)\n      );\n      const closed = [];\n      for (const c of prevConnsRef.current) {\n        const idx = x.findIndex((conn: ConnectionItem) => conn.id === c.id);\n        if (idx < 0) closed.push(c);\n      }\n      setClosedConns((prev) => {\n        // keep max 100 entries\n        return [...closed, ...prev].slice(0, 101);\n      });\n      // if previous connections and current connections are both empty\n      // arrays, we wont update state to avaoid rerender\n      if (\n        x &&\n        (x.length !== 0 || prevConnsRef.current.length !== 0) &&\n        !isRefreshPaused\n      ) {\n        prevConnsRef.current = x;\n        setConns(x);\n      } else {\n        prevConnsRef.current = x;\n      }\n    },\n    [setConns, isRefreshPaused]\n  );\n  useEffect(() => {\n    return connAPI.fetchData(apiConfig, read);\n  }, [apiConfig, read]);\n\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <ContentHeader title={t('Connections')} />\n      <Tabs>\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n          }}\n        >\n          <TabList>\n            <Tab>\n              <span>{t('Active')}</span>\n              <span className={s.connQty}>\n                {/* @ts-expect-error ts-migrate(2786) FIXME: 'ConnQty' cannot be used as a JSX component. */}\n                <ConnQty qty={filteredConns.length} />\n              </span>\n            </Tab>\n            <Tab>\n              <span>{t('Closed')}</span>\n              <span className={s.connQty}>\n                {/* @ts-expect-error ts-migrate(2786) FIXME: 'ConnQty' cannot be used as a JSX component. */}\n                <ConnQty qty={filteredClosedConns.length} />\n              </span>\n            </Tab>\n          </TabList>\n          <div className={s.inputWrapper}>\n            <input\n              type=\"text\"\n              name=\"filter\"\n              autoComplete=\"off\"\n              className={s.input}\n              placeholder=\"Filter\"\n              onChange={(e) => setFilterKeyword(e.target.value)}\n            />\n          </div>\n        </div>\n        <div\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'number | MutableRefObject<any>' is not assig... Remove this comment to see the full error message\n          ref={refContainer}\n          style={{ padding: 30, paddingBottom, paddingTop: 0 }}\n        >\n          <div\n            style={{\n              // @ts-expect-error ts-migrate(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message\n              height: containerHeight - paddingBottom,\n              overflow: 'auto',\n            }}\n          >\n            <TabPanel>\n              <>{renderTableOrPlaceholder(filteredConns)}</>\n              <Fab\n                icon={\n                  isRefreshPaused ? <Play size={16} /> : <Pause size={16} />\n                }\n                mainButtonStyles={\n                  isRefreshPaused\n                    ? {\n                        background: '#e74c3c',\n                      }\n                    : {}\n                }\n                style={fabPosition}\n                text={isRefreshPaused ? 'Resume Refresh' : 'Pause Refresh'}\n                onClick={toggleIsRefreshPaused}\n              >\n                <Action\n                  text=\"Close All Connections\"\n                  onClick={openCloseAllModal}\n                >\n                  <IconClose size={10} />\n                </Action>\n              </Fab>\n            </TabPanel>\n            <TabPanel>{renderTableOrPlaceholder(filteredClosedConns)}</TabPanel>\n          </div>\n        </div>\n        <ModalCloseAllConnections\n          isOpen={isCloseAllModalOpen}\n          primaryButtonOnTap={closeAllConnections}\n          onRequestClose={closeCloseAllModal}\n        />\n      </Tabs>\n    </div>\n  );\n}\n\nconst mapState = (s: State) => ({\n  apiConfig: getClashAPIConfig(s),\n});\n\nexport default connect(mapState)(Conn);\n","// extracted by mini-css-extract-plugin\nexport default {\"spining\":\"_3nmqcBZJL5\",\"spining_keyframes\":\"RLtvWZ8oZ2\"};","import './rtf.css';\n\nimport * as React from 'react';\nimport { Action, Fab } from 'react-tiny-fab/dist';\n\nimport s from './Fab.module.css';\n\nexport function IsFetching({ children }: { children: React.ReactNode }) {\n  return <span className={s.spining}>{children}</span>;\n}\n\nexport const position = {\n  right: 10,\n  bottom: 10,\n};\n\nexport { Fab, Action };\n","import React from 'react';\n\nconst { useState, useRef, useCallback, useLayoutEffect } = React;\n\n/**\n * cosnt [ref, remainingHeight] = useRemainingViewPortHeight();\n *\n * return a reference, and the remaining height of the referenced dom node\n * to the bottom of the view port\n *\n */\nexport default function useRemainingViewPortHeight() {\n  const ref = useRef(null);\n  const [containerHeight, setContainerHeight] = useState(200);\n  const updateContainerHeight = useCallback(() => {\n    const { top } = ref.current.getBoundingClientRect();\n    setContainerHeight(window.innerHeight - top);\n  }, []);\n\n  useLayoutEffect(() => {\n    updateContainerHeight();\n    window.addEventListener('resize', updateContainerHeight);\n    return () => {\n      window.removeEventListener('resize', updateContainerHeight);\n    };\n  }, [updateContainerHeight]);\n\n  return [ref, containerHeight];\n}\n"],"sourceRoot":""}